pipeline {
    agent any

    environment {
        FRONTEND_DIR = 'scan-ticket-app'
        BACKEND_DIR = 'src'
        FRONTEND_BUILD_DIR = '/var/www/scanner-frontend'
        BACKEND_SERVICE_NAME = 'scanner-backend'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/Tom8797438/scan_ticket.git'
            }
        }

        stage('Install Dependencies') {
            parallel {
                stage('Frontend Dependencies') {
                    steps {
                        dir("${FRONTEND_DIR}") {
                            sh 'npm install'
                        }
                    }
                }
                stage('Backend Dependencies') {
                    steps {
                        dir("${BACKEND_DIR}") {
                            sh '''
                            npm install
                            npm install qrcode jspdf sqlite3
                            '''
                        }
                    }
                }
            }
        }

        stage('Setup Backend Environment') {
            steps {
                writeFile file: "${BACKEND_DIR}/.env", text: '''
                HOST=0.0.0.0
                PORT=1337

                APP_KEYS=Ez/sQSwcKow6aQHjQx+h1A==,Ql0C9axGLLmRbIj9YCNE0A==,A7izS0OZrvpvv4VvpdxyJw==,LCi2BVEhlKztB5KaCdjzMw==
                API_TOKEN_SALT=yglTa4BSbK9xbz2UY4PKmA==
                ADMIN_JWT_SECRET=RaxA03Gv0pVZx9Zyck9AYQ==
                TRANSFER_TOKEN_SALT=rfupr1SZJR5iashCU7gXwQ==

                DATABASE_CLIENT=sqlite
                DATABASE_FILENAME=.tmp/data.db
                JWT_SECRET=mF9xDsFDCtnFHHSueOg6Mw==
                '''
            }

            // Assure que Strapi peut écrire dans les répertoires nécessaires
            steps {
                sh '''
                mkdir -p ${BACKEND_DIR}/.cache ${BACKEND_DIR}/.tmp
                chmod -R 775 ${BACKEND_DIR}/.cache ${BACKEND_DIR}/.tmp
                '''
            }
        }

        stage('Build Frontend') {
            steps {
                dir("${FRONTEND_DIR}") {
                    sh 'npm run build'
                }
            }
        }

        stage('Deploy Frontend') {
            steps {
                sh """
                rm -rf ${FRONTEND_BUILD_DIR}/*
                cp -r ${FRONTEND_DIR}/dist/* ${FRONTEND_BUILD_DIR}
                """
            }
        }

        stage('Deploy Backend') {
            steps {
                dir("${BACKEND_DIR}") {
                    sh """
                    pm2 stop ${BACKEND_SERVICE_NAME} || true
                    pm2 start npm --name "${BACKEND_SERVICE_NAME}" -- start
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Build and Deployment Successful!'
        }
        failure {
            echo 'Build or Deployment Failed. Check the logs.'
        }
    }
}
